# code: language=Ansible insertSpaces=true tabSize=2

- hosts: nios
  connection: local
  tasks:

    - name: Assert arguments
      assert:
        that:
          - item.data | length > 0
        fail_msg: "Rejected requested {{ item.kind }}: '{{ item.data }}'"
        success_msg: "Accepted requested {{ item.kind }}: '{{ item.data }}'"
      with_items:
        - kind: "network view"
          data: "{{ request_view | default('') }}"
        - kind: "network container"
          data: "{{ request_container | default('') }}"
        - kind: "network"
          data: "{{ request_network | default('') }}"
      tags: [always]
    
    - name: Lookup view, container and network
      set_fact:
        infoblox_view: "{{ lookup('nios', 'view', provider=nios_provider, filter={'name': request_view}) }}"
        infoblox_container: "{{ lookup('nios', 'networkcontainer', extattrs={'Plateforme': request_container}, provider=nios_provider) }}"
        infoblox_network: "{{ lookup('nios', 'network', provider=nios_provider, filter={'network': request_network}) }}"
      tags: [always]

    - name: Assert view and container
      assert:
        that:
          - item.data is mapping and item.data | length > 0
        fail_msg: "The requested {{ item.kind }} '{{ item.name }}' was not found in Infoblox"
        success_msg: "The requested {{ item.kind }} '{{ item.name }}' is valid"
      with_items:
        - kind: "network view"
          name: "{{ request_view }}"
          data: "{{ infoblox_view }}"
        - kind: "network container"
          name: "{{ request_container }}"
          data: "{{ infoblox_container }}"
      tags: [always]

    - name: Assert network does not already exists
      assert:
        that:
          - infoblox_network | length == 0
        success_msg: "The request network does not exists, continue"
        fail_msg: "The request network {{ request_network }} already exists"
      tags: [always]

    - name: Assert network inclusion in container
      assert:
        that:
          - "{{ infoblox_container.network | network_in_network(request_network) }}"
        fail_msg: "The requested network {{ request_network }} is not contained in network container {{ infoblox_container.network }}"
        success_msg: "The requested network {{ request_network }} is contained in network container {{ infoblox_container.network }}"
      tags: [always]

    - name: Generate attributes
      set_fact:
        request_plateforme: "{{ request_plateforme | default(query('community.general.random_string', length=4, numbers=false, special=false, upper=false)[0] + '-' + query('community.general.random_string', length=4, numbers=true, special=false, upper=false)[0]) }}"
        request_description: "{{ request_description | default('Generated via Ansible/AWX) }}"
      tags: [always]

    - name: Create network
      nios_network:
        network: "{{ request_network }}"
        network_view: "{{ request_view }}"
        extattrs:
          Plateforme: "{{ request_plateforme }}"
        comment: "{{ request_description }}"
        state: present
        provider: "{{ nios_provider }}"
      tags: [never, setup]

    - name: Set facts
      set_fact:
        created_network:
          network: "{{ request_network.split('/')[0] }}"
          mask_bits: "{{ request_network.split('/')[1] }}"
          network_view: "{{ request_view }}"
          plateforme: "{{ request_plateforme }}"
          description: "{{ request_description }}"
      tags: [never, setup]

    - name: Set stats
      set_stats:
        data:
          notify_kind: "{{ 'query' in ansible_run_tags and 'query' or 'setup' }}"
          notify_resource: "network"
          # ---
          request_view: "{{ request_view }}"
          request_container: "{{ request_container }}"
          request_network: "{{ request_network }}"
          request_plateforme: "{{ request_plateforme }}"
          request_description: "{{ request_description }}"
      tags: [never, query, setup]


- name: Register network
  hosts: device42
  tasks:

    - name: Register network
      device42_api:
        meth: POST
        path: api/1.0/subnets
        data:
          network: "{{ hostvars[item]['created_network']['network'] }}"
          mask_bits: "{{ hostvars[item]['created_network']['mask_bits'] }}"
          name: "{{ hostvars[item]['created_network']['plateforme'] }}"
          description: "{{ hostvars[item]['created_network']['description'] }}"
      with_items: "{{ groups['nios'] }}"
      ignore_errors: yes
      tags: [never, setup]
