# code: language=Ansible insertSpaces=true tabSize=2

- hosts: nios
  connection: local
  collections:
    - infoblox.nios_modules
  tasks:

    - name: Assert arguments
      assert:
        that: "{{ item.test }}"
        fail_msg: "Rejected requested {{ item.name }}: '{{ item.data }}'"
        success_msg: "Accepted requested {{ item.name }}: '{{ item.data }}'"
      with_items:
        - name: "network view"
          data: "{{ request_view | default('BOPI-test') }}"
          test:
            - "item.data | length > 0"
        - name: "host"
          data: "{{ request_host | default('') }}"
          test:
            - "item.data | length > 0"
        - name: "IPv4 address"
          data: "{{ request_ipv4 | default('') }}"
          test:
            - "item.data | length > 0"
      tags: [always]

    - name: Assert view
      assert:
        that:
          - item.data == "BOPI-test"
        fail_msg: "Not allowed to use this netrwork view."
        success_msg: "Network view BOPI-test"
      with_items:
        - kind: "network view"
          data: "{{ request_view | default('BOPI-test') }}"
      tags: [always]

    
    - name: Assert Non empty DNZ zone
      assert:
        that:
          - item.data == "lab2.ict.ptech.lu"
        fail_msg: "Not allowed to use this DNS zone."
        success_msg: "DNS zone lab2.ict.ptech.lu"
      with_items:
        - kind: "dns zone"
          data: "{{ request_zone | default('') }}"
      when: request_zone | length > 0
      tags: [always]

    - name: Asset Empty DNS zone
      assert:
        that:
          - item.data == ''
        fail_msg: "Not allowed to use this DNS zone."
        success_msg: "No DNS entry to create."
      with_items:
        - kind: "dns zone"
          data: "{{ request_zone | default('') }}"
      when: request_zone | length <= 0
      tags: [always]

    - name: Return the list of network views
      debug:
        msg: "{{ lookup('community.general.nios', 'networkview', provider=nios_provider) }}"
      tags: [always]

    - name: Lookup view, and host
      set_fact:
        infoblox_view: "{{ lookup('community.general.nios', 'networkview', filter={'name': request_view}, provider=nios_provider) }}"
        infoblox_host: "{{ lookup('community.general.nios', 'record:host', filter={'name': request_host}, provider=nios_provider) }}"
        infoblox_host_ipv4: "{{ lookup('community.general.nios', 'record:host', filter={'ipv4addr': request_ipv4}, provider=nios_provider) }}"
      tags: [always]

    - name: Debug view
      debug:
        var: infoblox_view
      tags: [never, debug]

    - name: Debug host ipv4
      debug:
        var: infoblox_host_ipv4
      tags: [never, debug]

    - name: Assert view exists on infoblox
      assert:
        that:
          - "item.data is mapping and item.data | length > 0"
        fail_msg: "The requested {{ item.kind }} '{{ item.name }}' was not found in Infoblox"
        success_msg: "The requested {{ item.kind }} '{{ item.name }}' is valid"
      with_items:
        - kind: 'network view'
          name: "{{ request_view }}"
          data: "{{ infoblox_view }}"
      tags: [always]

    - name: Assert host does not already exists
      assert:
        that:
          - infoblox_host | length == 0
        success_msg: "The request host does not exists, continue"
        fail_msg: "The request host {{ request_host }} already exists"
      tags: [always]

    - name: Return the list of host with specific IP
      debug:
        msg: "{{ lookup('community.general.nios', 'record:host', filter={'ipv4addr': request_ipv4}, provider=nios_provider) }}"
      tags: [always]

    - name: Assert IPv4 does not already exists
      assert:
        that:
          - infoblox_host_ipv4 | length == 0
        success_msg: "The request IPv4 does not exists, continue"
        fail_msg: "The request IPv4 {{ request_ipv4 }} already exists"
      tags: [always]

    - name: Generate Non FQDN name
      set_fact:
        object_name: "{{ request_host }}"
      when: request_zone | length == 0
      tags: [always]

    - name: Generate FQDN name
      set_fact:
        object_name: "{{ request_host }}.{{ request_zone }}"
      when: request_zone | length > 0
      tags: [always]

    - name: Debug
      debug:
        var: object_name
      tags: [never, debug]

    - name: Create host
      community.general.nios_host_record:
        name: "{{ request_host }}.{{ request_zone }}"
        view: "{{ request_view }}"
        ipv4addrs:
          - ipv4addr: "{{ request_ipv4 }}"
        ipv6addrs:
          - ipv6addr: "{{ request_ipv6 }}"
        extattrs:
            Contacts: "{{ request_requestor }}"
            Description: "{{ request_description }}"
        comment: "{{request_comment}}}}"
        state: present
        provider: "{{ nios_provider }}"
      delegate_to: localhost
      tags: [never, setup]
