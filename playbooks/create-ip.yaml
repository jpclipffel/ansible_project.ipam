# code: language=Ansible insertSpaces=true tabSize=2

- name: Create IP
  hosts: nios
  connection: local
  tasks:

    - name: Assert arguments
      assert:
        that: "{{ item.test }}"
        fail_msg: "Rejected requested {{ item.name }}: '{{ item.data }}'"
        success_msg: "Accepted requested {{ item.name }}: '{{ item.data }}'"
      with_items:
        - name: "network view"
          data: "{{ request_view | default('') }}"
          test:
            - "item.data | length > 0"
        - name: "network container"
          data: "{{ request_container | default('') }}"
          test:
            - "item.data | length > 0"
        - name: "network range"
          data: "{{ request_network | default('') }}"
          test:
            - "item.data | length > 0"
        - name: "IP count"
          data: "{{ request_count | default(-1) | int }}"
          test:
            - "item.data | int > 0 and item.data | int <= 245"
        # - name: "Name template"
        #   data: !unsafe 
        #   test:
        #     - "item.data | length > 0"

      tags: [always]
    
    - name: Lookup view, container and network
      set_fact:
        infoblox_view: "{{ lookup('nios', 'view', provider=nios_provider, filter={'name': request_view}) }}"
        infoblox_container: "{{ lookup('nios', 'networkcontainer', extattrs={'Plateforme': request_container}, provider=nios_provider) }}"
        infoblox_network: "{{ lookup('nios', 'network', provider=nios_provider, filter={'network': request_network}) }}"
      tags: [always]

    - name: Assert view, container and network
      assert:
        that:
          - "item.data is mapping and item.data | length > 0"
        fail_msg: "The requested {{ item.kind }} '{{ item.name }}' was not found in Infoblox"
        success_msg: "The requested {{ item.kind }} '{{ item.name }}' is valid"
      with_items:
        - kind: 'network view'
          name: "{{ request_view }}"
          data: "{{ infoblox_view }}"
        - kind: 'network container'
          name: "{{ request_container }}"
          data: "{{ infoblox_container }}"
        - kind: 'network'
          name: "{{ request_network }}"
          data: "{{ infoblox_network }}"
      tags: [always]

    - name: Assert network inclusion in container
      assert:
        that:
          - "{{ infoblox_container.network | network_in_network(infoblox_network.network) }}"
        fail_msg: "The requested network {{ infoblox_network.network }} is not contained in network container {{ infoblox_container.network }}"
        success_msg: "The requested network {{ infoblox_network.network }} is contained in network container {{ infoblox_container.network }}"
      tags: [always]

    - name: Create hosts records
      debug:
        msg: "Would create record {{ request_name }} at {{ ipv4 }} on view {{ request_view }} in network {{ request_network }}"
      loop: "{{ lookup('nios_next_ip', request_network, num=request_count, provider=nios_provider) }}"
      loop_control:
        loop_var: ipv4
        index_var: count
      register: created_records
      tags: [never, setup]

    - name: Create hosts records
      community.general.nios_host_record:
        name: "{{ request_name }}"
        view: "{{ request_view }}"
        ipv4addrs:
          - ipv4addr: "{{ ipv4 }}"
        comment: "Created by the IPAM automation project"
        state: present
        provider: "{{ nios_provider }}"
      loop: "{{ lookup('nios_next_ip', request_network, num=request_count, provider=nios_provider) }}"
      loop_control:
        loop_var: ipv4
        index_var: count
      register: created_records
      tags: [never]

    - set_stats:
        data:
          created_records: "{{ created_records }}"
      tags: [always]


- name: Register host records
  hosts: device42
  tasks:

    - name: Register host records
      debug:
        var: hostvars[item]['created_records']
      with_items: "{{ groups['nios'] }}"
      tags: [never, setup]
